What It Is:
===========
Task is a class in the System.Threading.Tasks namespace, used for asynchronous programming. It represents an operation that may or may not be completed yet. Task is the backbone of asynchronous programming in .NET.

Why It's Important:
===================
Using Task enables you to write non-blocking code, which is crucial for maintaining the responsiveness of web applications, especially when performing I/O operations like accessing a database or calling an external API.

example:

public async Task<List<Donor>> GetDonorsAsync()
{
    return await _context.Donors.ToListAsync();
}


In the interface you've shared, the methods are defined with either IQueryable or Task based on what they need to accomplish:

IQueryable<Listing> Getall();:

Purpose: This method is used to retrieve a collection of Listing objects from the database.
Why IQueryable: IQueryable allows for deferred execution, meaning that the actual query to the database isn't executed until the data is actually accessed (e.g., when you loop through the results or convert them to a list). This also allows further filtering or sorting before the query is executed.
Task Add(Listing listing);:

Purpose: This method adds a new Listing object to the database.
Why Task: The Task type indicates that this is an asynchronous operation, meaning it can run in the background and not block the main thread while waiting for the database operation to complete.
Task<Listing> GetById(int? id);:

Purpose: This method retrieves a single Listing by its ID.
Why Task<Listing>: This returns a single Listing object wrapped in a Task, making it an asynchronous operation. This allows the method to retrieve the Listing from the database without blocking the main thread.
Task SaveChnages();:

Purpose: This method commits all changes made in the context to the database.
Why Task: Like the other Task methods, this is asynchronous to avoid blocking the main thread during the database operation.
